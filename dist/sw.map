{"version":3,"sources":["sw.js"],"names":["frontendAddress","self","location","origin","cacheName","filesToCache","addEventListener","e","waitUntil","caches","open","then","cache","addAll","keys","keyList","Promise","all","map","key","delete","clients","claim","request","method","navigator","onLine","respondWith","match","response","fetch","Error","event","notification","JSON","parse","data","text","title","options","body","icon","badge","registration","showNotification","openApp","smug","replace","close","openWindow"],"mappings":";AAAA,IAAMA,EAAkBC,KAAKC,SAASC,OAAS,MACzCC,EAAY,WAEdC,EAAe,CACjB,KAGFJ,KAAKK,iBAAiB,UAAW,SAACC,GAChCA,EAAEC,UACAC,OAAOC,KAAKN,GAAWO,KAAK,SAAAC,GAASA,OAAAA,EAAMC,OAAOR,QAItDJ,KAAKK,iBAAiB,WAAY,SAACC,GAS1BN,OARPM,EAAEC,UACAC,OAAOK,OAAOH,KAAK,SAAAI,GAAWC,OAAAA,QAAQC,IAAIF,EAAQG,IAAI,SAACC,GACjDA,GAAAA,IAAQf,EACHK,OAAAA,OAAOW,OAAOD,SAKpBlB,KAAKoB,QAAQC,UAGtBrB,KAAKK,iBAAiB,QAAS,SAACC,GACJ,QAArBA,EAAEgB,QAAQC,QAAyC,SAArBjB,EAAEgB,QAAQC,SAAsB,IAAUC,UAAUC,OAGrFnB,EAAEoB,YAAYlB,OAAOmB,MAAMrB,EAAEgB,SAASZ,KAAK,SAAAkB,GAAYA,OAAAA,GAAYC,MAAMvB,EAAEgB,YAF3E,IAAIQ,MAAM,+BAKd9B,KAAKK,iBAAiB,OAAQ,SAAC0B,GACzBC,IAAAA,EAAeC,KAAKC,MAAMH,EAAMI,KAAKC,QAEnCC,EAAQL,EAAaK,MACrBC,EAAU,CACdC,KAAMP,EAAaI,KACnBI,KAAM,kBACNC,MAAO,mBAGTzC,KAAK0C,aAAaC,iBAAiBN,EAAOC,KAG5CtC,KAAKK,iBAAiB,oBAAqB,SAAC0B,GACtCA,GAA+B,UAA/BA,EAAMC,aAAaY,QAAnBb,CAEAc,IAAAA,EAAOd,EAAMC,aAAaK,MAAMS,QAAQ,KAAM,KAClDf,EAAMC,aAAae,QAEnB3B,QAAQ4B,WAAcjD,GAAAA,OAAAA,EAA0B8C,YAAAA,OAAAA","file":"sw.map","sourceRoot":"..\\site","sourcesContent":["const frontendAddress = self.location.origin + '/#/';\r\nconst cacheName = 'bz-cache';\r\n\r\nlet filesToCache = [\r\n  \"/\",\r\n];\r\n\r\nself.addEventListener('install', (e) => {\r\n  e.waitUntil(\r\n    caches.open(cacheName).then(cache => cache.addAll(filesToCache))\r\n  );\r\n});\r\n\r\nself.addEventListener('activate', (e) => {\r\n  e.waitUntil(\r\n    caches.keys().then(keyList => Promise.all(keyList.map((key) => {\r\n      if (key !== cacheName) {\r\n        return caches.delete(key);\r\n      }\r\n    })))\r\n  );\r\n\r\n  return self.clients.claim();\r\n});\r\n\r\nself.addEventListener('fetch', (e) => {\r\n  if ((e.request.method === \"PUT\" || e.request.method === \"POST\") && false === navigator.onLine)\r\n    new Error('No internet connectivity!');\r\n  else \r\n    e.respondWith(caches.match(e.request).then(response => response || fetch(e.request)))\r\n});\r\n\r\nself.addEventListener('push', (event) => {\r\n  let notification = JSON.parse(event.data.text())\r\n\r\n  const title = notification.title;\r\n  const options = {\r\n    body: notification.text,\r\n    icon: 'icon512x512.png',\r\n    badge: 'icon192x192.png'\r\n  };\r\n\r\n  self.registration.showNotification(title, options);\r\n});\r\n\r\nself.addEventListener('notificationclick', (event) => {\r\n  if (event.notification.openApp === 'false') return;\r\n\r\n  let smug = event.notification.title.replace(/ /g, '-')\r\n  event.notification.close();\r\n\r\n  clients.openWindow(`${frontendAddress}article/${smug}`)\r\n});"]}